// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.cma;

import com.cma.AttachFile;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect AttachFile_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager AttachFile.entityManager;
    
    public static final List<String> AttachFile.fieldNames4OrderClauseFilter = java.util.Arrays.asList("photo", "namecard", "idcard", "passport", "apec", "pf", "slip1", "slip2", "holdingTax", "uploadPhoto", "uploadNamecard", "uploadIdcard", "uploadPassport", "uploadApec", "uploadPf", "uploadSlip1", "uploadSlip2", "uploadHoldingTax", "photoFileName", "namecardFileName", "idcardFileName", "passportFileName", "apecFileName", "pfFileName", "slip1FileName", "slip2FileName", "holdingTaxFileName", "stdProfile");
    
    public static final EntityManager AttachFile.entityManager() {
        EntityManager em = new AttachFile().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long AttachFile.countAttachFiles() {
        return entityManager().createQuery("SELECT COUNT(o) FROM AttachFile o", Long.class).getSingleResult();
    }
    
    public static List<AttachFile> AttachFile.findAllAttachFiles() {
        return entityManager().createQuery("SELECT o FROM AttachFile o", AttachFile.class).getResultList();
    }
    
    public static List<AttachFile> AttachFile.findAllAttachFiles(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM AttachFile o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, AttachFile.class).getResultList();
    }
    
    public static AttachFile AttachFile.findAttachFile(Long id) {
        if (id == null) return null;
        return entityManager().find(AttachFile.class, id);
    }
    
    public static List<AttachFile> AttachFile.findAttachFileEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM AttachFile o", AttachFile.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<AttachFile> AttachFile.findAttachFileEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM AttachFile o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, AttachFile.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void AttachFile.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void AttachFile.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            AttachFile attached = AttachFile.findAttachFile(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void AttachFile.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void AttachFile.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public AttachFile AttachFile.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        AttachFile merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
