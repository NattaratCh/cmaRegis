// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.cma;

import com.cma.Student;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Student_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager Student.entityManager;
    
    public static final List<String> Student.fieldNames4OrderClauseFilter = java.util.Arrays.asList("userRegisSet", "studentClass", "attachFile", "children_profileSet", "education_profileSet", "training_profileSet", "titleTh", "titleEn", "firstnameTh", "firstnameEn", "lastnameTh", "lastnameEn", "fullNameTh", "fullNameEn", "nickname", "sex", "bdateString", "birthdate", "idcardNo", "passportNo", "ropNo", "positionTh", "positionEn", "institutionTh", "institutionEn", "retireFlag", "enrollType", "workFullAddress", "institutionNo", "institutionMooNo", "institutionBuilding", "institutionFloor", "institutionSoi", "institutionStreet", "institutionSubdistrict", "institutionDistrict", "institutionProvince", "institutionPostalCode", "frontworktel1", "middleworktel1", "lastworktel1", "worktel1_2", "extworktel1", "worktel1", "frontworktel2", "middleworktel2", "lastworktel2", "worktel2_2", "extworktel2", "worktel2", "frontworkfax", "middleworkfax", "lastworkfax", "workfax", "frontmobile1", "middlemobile1", "lastmobile1", "mobile1", "frontmobile2", "middlemobile2", "lastmobile2", "mobile2", "email", "workEmail", "lineId", "facebook", "email2", "homeNo", "mooNo", "building", "village", "floor", "soi", "street", "subdistrict", "district", "province", "postalCode", "homeFullAddress", "fronthometel1", "middlehometel1", "lasthometel1", "hometel1_2", "exthometel1", "hometel1", "fronthometel2", "middlehometel2", "lasthometel2", "hometel2_2", "exthometel2", "hometel2", "fronthomefax", "middlehomefax", "lasthomefax", "homefax", "sendingAddress", "marriedStatus", "spouseFirstName", "spouseLastName", "spouseCareer", "spouseInstitution", "spouseBdateString", "spouseBirthDay", "spouseRace", "spouseNationality", "spouseReligion", "childrenFirstName", "childrenLastName", "childrenCareer", "childrenBdateString", "childrenBirthday", "childrenRace", "childrenNationality", "childrenReligion", "bdField", "bdUniversity", "bdYear", "mdField", "mdUniversity", "mdYear", "phdField", "phdUniversity", "phdYear", "trainingName", "trainingInstitute", "trainingClass", "traingYear", "collboratorTitle", "collboratorFirstName", "collboratorLastName", "collboratorFullName", "collboratorPosition", "frontcollboratorTel", "middlecollboratorTel", "lastcollboratorTel", "collboratorTel_2", "extcollboratorTel", "collboratorTel", "frontcollboratorMobile", "middlecollboratorMobile", "lastcollboratorMobile", "collboratorMobile", "frontcollboratorFax", "middlecollboratorFax", "lastcollboratorFax", "collboratorFax", "collboratorEmail", "collboratorLineId", "frontdriverTel", "middledriverTel", "lastdriverTel", "driverTel", "carNo", "carBrand", "carColor", "playGolf", "handyCap", "generalFood", "halalFood", "jFood", "vegeterianFood", "allergiesSeaFood", "beefFood", "otherFood", "smoking", "jacketSize", "poloSize", "waist", "tall", "receiptDetailName", "taxId", "receiptDetailAddress", "submitProfile", "permission", "dataState", "groupName", "userWeb");
    
    public static final EntityManager Student.entityManager() {
        EntityManager em = new Student().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Student.countStudents() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Student o", Long.class).getSingleResult();
    }
    
    public static List<Student> Student.findAllStudents() {
        return entityManager().createQuery("SELECT o FROM Student o", Student.class).getResultList();
    }
    
    public static List<Student> Student.findAllStudents(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM Student o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, Student.class).getResultList();
    }
    
    public static Student Student.findStudent(Long id) {
        if (id == null) return null;
        return entityManager().find(Student.class, id);
    }
    
    public static List<Student> Student.findStudentEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Student o", Student.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<Student> Student.findStudentEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM Student o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, Student.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void Student.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Student.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Student attached = Student.findStudent(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Student.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Student.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Student Student.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Student merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
