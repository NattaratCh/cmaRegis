// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.cma;

import com.cma.Student;
import com.cma.UserRegis;
import com.cma.UserRegisDataOnDemand;
import com.cma.UserRegisRole;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect UserRegisDataOnDemand_Roo_DataOnDemand {
    
    declare @type: UserRegisDataOnDemand: @Component;
    
    private Random UserRegisDataOnDemand.rnd = new SecureRandom();
    
    private List<UserRegis> UserRegisDataOnDemand.data;
    
    public UserRegis UserRegisDataOnDemand.getNewTransientUserRegis(int index) {
        UserRegis obj = new UserRegis();
        setEnabled(obj, index);
        setLastChangePwd(obj, index);
        setLoginTimes(obj, index);
        setPassword(obj, index);
        setPassword1(obj, index);
        setPassword2(obj, index);
        setPassword3(obj, index);
        setPassword4(obj, index);
        setPassword5(obj, index);
        setPointer(obj, index);
        setStudentProfile(obj, index);
        setUserRole(obj, index);
        setUsername(obj, index);
        return obj;
    }
    
    public void UserRegisDataOnDemand.setEnabled(UserRegis obj, int index) {
        Boolean enabled = Boolean.TRUE;
        obj.setEnabled(enabled);
    }
    
    public void UserRegisDataOnDemand.setLastChangePwd(UserRegis obj, int index) {
        Date lastChangePwd = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setLastChangePwd(lastChangePwd);
    }
    
    public void UserRegisDataOnDemand.setLoginTimes(UserRegis obj, int index) {
        int loginTimes = index;
        obj.setLoginTimes(loginTimes);
    }
    
    public void UserRegisDataOnDemand.setPassword(UserRegis obj, int index) {
        String password = "password_" + index;
        obj.setPassword(password);
    }
    
    public void UserRegisDataOnDemand.setPassword1(UserRegis obj, int index) {
        String password1 = "password1_" + index;
        obj.setPassword1(password1);
    }
    
    public void UserRegisDataOnDemand.setPassword2(UserRegis obj, int index) {
        String password2 = "password2_" + index;
        obj.setPassword2(password2);
    }
    
    public void UserRegisDataOnDemand.setPassword3(UserRegis obj, int index) {
        String password3 = "password3_" + index;
        obj.setPassword3(password3);
    }
    
    public void UserRegisDataOnDemand.setPassword4(UserRegis obj, int index) {
        String password4 = "password4_" + index;
        obj.setPassword4(password4);
    }
    
    public void UserRegisDataOnDemand.setPassword5(UserRegis obj, int index) {
        String password5 = "password5_" + index;
        obj.setPassword5(password5);
    }
    
    public void UserRegisDataOnDemand.setPointer(UserRegis obj, int index) {
        int pointer = index;
        obj.setPointer(pointer);
    }
    
    public void UserRegisDataOnDemand.setStudentProfile(UserRegis obj, int index) {
        Student studentProfile = null;
        obj.setStudentProfile(studentProfile);
    }
    
    public void UserRegisDataOnDemand.setUserRole(UserRegis obj, int index) {
        UserRegisRole userRole = null;
        obj.setUserRole(userRole);
    }
    
    public void UserRegisDataOnDemand.setUsername(UserRegis obj, int index) {
        String username = "username_" + index;
        obj.setUsername(username);
    }
    
    public UserRegis UserRegisDataOnDemand.getSpecificUserRegis(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        UserRegis obj = data.get(index);
        Long id = obj.getId();
        return UserRegis.findUserRegis(id);
    }
    
    public UserRegis UserRegisDataOnDemand.getRandomUserRegis() {
        init();
        UserRegis obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return UserRegis.findUserRegis(id);
    }
    
    public boolean UserRegisDataOnDemand.modifyUserRegis(UserRegis obj) {
        return false;
    }
    
    public void UserRegisDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = UserRegis.findUserRegisEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'UserRegis' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<UserRegis>();
        for (int i = 0; i < 10; i++) {
            UserRegis obj = getNewTransientUserRegis(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
