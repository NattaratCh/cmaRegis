// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.cma;

import com.cma.Batch;
import com.cma.BatchDataOnDemand;
import com.cma.Course;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;
import org.springframework.web.multipart.commons.CommonsMultipartFile;

privileged aspect BatchDataOnDemand_Roo_DataOnDemand {
    
    declare @type: BatchDataOnDemand: @Component;
    
    private Random BatchDataOnDemand.rnd = new SecureRandom();
    
    private List<Batch> BatchDataOnDemand.data;
    
    public Batch BatchDataOnDemand.getNewTransientBatch(int index) {
        Batch obj = new Batch();
        setActivityCalendar(obj, index);
        setActivityCalendarFile(obj, index);
        setCourse(obj, index);
        setDirectory(obj, index);
        setDirectoryFile(obj, index);
        setEnd_date(obj, index);
        setFile1(obj, index);
        setFile2(obj, index);
        setFile3(obj, index);
        setFile4(obj, index);
        setFile5(obj, index);
        setFilename1(obj, index);
        setFilename2(obj, index);
        setFilename3(obj, index);
        setFilename4(obj, index);
        setFilename5(obj, index);
        setNameEn(obj, index);
        setNameTh(obj, index);
        setNumber(obj, index);
        setRemark(obj, index);
        setStart_date(obj, index);
        setType(obj, index);
        setUploadfile1(obj, index);
        setUploadfile2(obj, index);
        setUploadfile3(obj, index);
        setUploadfile4(obj, index);
        setUploadfile5(obj, index);
        return obj;
    }
    
    public void BatchDataOnDemand.setActivityCalendar(Batch obj, int index) {
        String activityCalendar = "activityCalendar_" + index;
        obj.setActivityCalendar(activityCalendar);
    }
    
    public void BatchDataOnDemand.setActivityCalendarFile(Batch obj, int index) {
        CommonsMultipartFile activityCalendarFile = null;
        obj.setActivityCalendarFile(activityCalendarFile);
    }
    
    public void BatchDataOnDemand.setCourse(Batch obj, int index) {
        Course course = null;
        obj.setCourse(course);
    }
    
    public void BatchDataOnDemand.setDirectory(Batch obj, int index) {
        String directory = "directory_" + index;
        obj.setDirectory(directory);
    }
    
    public void BatchDataOnDemand.setDirectoryFile(Batch obj, int index) {
        CommonsMultipartFile directoryFile = null;
        obj.setDirectoryFile(directoryFile);
    }
    
    public void BatchDataOnDemand.setEnd_date(Batch obj, int index) {
        Date end_date = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setEnd_date(end_date);
    }
    
    public void BatchDataOnDemand.setFile1(Batch obj, int index) {
        CommonsMultipartFile file1 = null;
        obj.setFile1(file1);
    }
    
    public void BatchDataOnDemand.setFile2(Batch obj, int index) {
        CommonsMultipartFile file2 = null;
        obj.setFile2(file2);
    }
    
    public void BatchDataOnDemand.setFile3(Batch obj, int index) {
        CommonsMultipartFile file3 = null;
        obj.setFile3(file3);
    }
    
    public void BatchDataOnDemand.setFile4(Batch obj, int index) {
        CommonsMultipartFile file4 = null;
        obj.setFile4(file4);
    }
    
    public void BatchDataOnDemand.setFile5(Batch obj, int index) {
        CommonsMultipartFile file5 = null;
        obj.setFile5(file5);
    }
    
    public void BatchDataOnDemand.setFilename1(Batch obj, int index) {
        String filename1 = "filename1_" + index;
        obj.setFilename1(filename1);
    }
    
    public void BatchDataOnDemand.setFilename2(Batch obj, int index) {
        String filename2 = "filename2_" + index;
        obj.setFilename2(filename2);
    }
    
    public void BatchDataOnDemand.setFilename3(Batch obj, int index) {
        String filename3 = "filename3_" + index;
        obj.setFilename3(filename3);
    }
    
    public void BatchDataOnDemand.setFilename4(Batch obj, int index) {
        String filename4 = "filename4_" + index;
        obj.setFilename4(filename4);
    }
    
    public void BatchDataOnDemand.setFilename5(Batch obj, int index) {
        String filename5 = "filename5_" + index;
        obj.setFilename5(filename5);
    }
    
    public void BatchDataOnDemand.setNameEn(Batch obj, int index) {
        String nameEn = "nameEn_" + index;
        obj.setNameEn(nameEn);
    }
    
    public void BatchDataOnDemand.setNameTh(Batch obj, int index) {
        String nameTh = "nameTh_" + index;
        obj.setNameTh(nameTh);
    }
    
    public void BatchDataOnDemand.setNumber(Batch obj, int index) {
        Integer number = new Integer(index);
        obj.setNumber(number);
    }
    
    public void BatchDataOnDemand.setRemark(Batch obj, int index) {
        String remark = "remark_" + index;
        obj.setRemark(remark);
    }
    
    public void BatchDataOnDemand.setStart_date(Batch obj, int index) {
        Date start_date = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setStart_date(start_date);
    }
    
    public void BatchDataOnDemand.setType(Batch obj, int index) {
        String type = "type_" + index;
        obj.setType(type);
    }
    
    public void BatchDataOnDemand.setUploadfile1(Batch obj, int index) {
        Boolean uploadfile1 = Boolean.TRUE;
        obj.setUploadfile1(uploadfile1);
    }
    
    public void BatchDataOnDemand.setUploadfile2(Batch obj, int index) {
        Boolean uploadfile2 = Boolean.TRUE;
        obj.setUploadfile2(uploadfile2);
    }
    
    public void BatchDataOnDemand.setUploadfile3(Batch obj, int index) {
        Boolean uploadfile3 = Boolean.TRUE;
        obj.setUploadfile3(uploadfile3);
    }
    
    public void BatchDataOnDemand.setUploadfile4(Batch obj, int index) {
        Boolean uploadfile4 = Boolean.TRUE;
        obj.setUploadfile4(uploadfile4);
    }
    
    public void BatchDataOnDemand.setUploadfile5(Batch obj, int index) {
        Boolean uploadfile5 = Boolean.TRUE;
        obj.setUploadfile5(uploadfile5);
    }
    
    public Batch BatchDataOnDemand.getSpecificBatch(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Batch obj = data.get(index);
        Long id = obj.getId();
        return Batch.findBatch(id);
    }
    
    public Batch BatchDataOnDemand.getRandomBatch() {
        init();
        Batch obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Batch.findBatch(id);
    }
    
    public boolean BatchDataOnDemand.modifyBatch(Batch obj) {
        return false;
    }
    
    public void BatchDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Batch.findBatchEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Batch' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Batch>();
        for (int i = 0; i < 10; i++) {
            Batch obj = getNewTransientBatch(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
