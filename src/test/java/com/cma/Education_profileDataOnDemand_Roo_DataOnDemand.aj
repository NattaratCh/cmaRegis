// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.cma;

import com.cma.Education_profile;
import com.cma.Education_profileDataOnDemand;
import com.cma.StudentDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect Education_profileDataOnDemand_Roo_DataOnDemand {
    
    declare @type: Education_profileDataOnDemand: @Component;
    
    private Random Education_profileDataOnDemand.rnd = new SecureRandom();
    
    private List<Education_profile> Education_profileDataOnDemand.data;
    
    @Autowired
    StudentDataOnDemand Education_profileDataOnDemand.studentDataOnDemand;
    
    public Education_profile Education_profileDataOnDemand.getNewTransientEducation_profile(int index) {
        Education_profile obj = new Education_profile();
        setDegree(obj, index);
        setField(obj, index);
        setGraduateYear(obj, index);
        setUniversity(obj, index);
        return obj;
    }
    
    public void Education_profileDataOnDemand.setDegree(Education_profile obj, int index) {
        String degree = "degree_" + index;
        obj.setDegree(degree);
    }
    
    public void Education_profileDataOnDemand.setField(Education_profile obj, int index) {
        String field = "field_" + index;
        obj.setField(field);
    }
    
    public void Education_profileDataOnDemand.setGraduateYear(Education_profile obj, int index) {
        String graduateYear = "graduateYear_" + index;
        obj.setGraduateYear(graduateYear);
    }
    
    public void Education_profileDataOnDemand.setUniversity(Education_profile obj, int index) {
        String university = "university_" + index;
        obj.setUniversity(university);
    }
    
    public Education_profile Education_profileDataOnDemand.getSpecificEducation_profile(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Education_profile obj = data.get(index);
        Long id = obj.getId();
        return Education_profile.findEducation_profile(id);
    }
    
    public Education_profile Education_profileDataOnDemand.getRandomEducation_profile() {
        init();
        Education_profile obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Education_profile.findEducation_profile(id);
    }
    
    public boolean Education_profileDataOnDemand.modifyEducation_profile(Education_profile obj) {
        return false;
    }
    
    public void Education_profileDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Education_profile.findEducation_profileEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Education_profile' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Education_profile>();
        for (int i = 0; i < 10; i++) {
            Education_profile obj = getNewTransientEducation_profile(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
