// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.cma;

import com.cma.UserWeb;
import com.cma.UserWebDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect UserWebDataOnDemand_Roo_DataOnDemand {
    
    declare @type: UserWebDataOnDemand: @Component;
    
    private Random UserWebDataOnDemand.rnd = new SecureRandom();
    
    private List<UserWeb> UserWebDataOnDemand.data;
    
    public UserWeb UserWebDataOnDemand.getNewTransientUserWeb(int index) {
        UserWeb obj = new UserWeb();
        setAccountExpired(obj, index);
        setAccountLocked(obj, index);
        setEnabled(obj, index);
        setLastLogin(obj, index);
        setLastUpdate(obj, index);
        setLoginCount(obj, index);
        setOldPasswordList(obj, index);
        setPassword(obj, index);
        setPasswordExpired(obj, index);
        setUsername(obj, index);
        return obj;
    }
    
    public void UserWebDataOnDemand.setAccountExpired(UserWeb obj, int index) {
        Boolean accountExpired = Boolean.TRUE;
        obj.setAccountExpired(accountExpired);
    }
    
    public void UserWebDataOnDemand.setAccountLocked(UserWeb obj, int index) {
        Boolean accountLocked = Boolean.TRUE;
        obj.setAccountLocked(accountLocked);
    }
    
    public void UserWebDataOnDemand.setEnabled(UserWeb obj, int index) {
        Boolean enabled = Boolean.TRUE;
        obj.setEnabled(enabled);
    }
    
    public void UserWebDataOnDemand.setLastLogin(UserWeb obj, int index) {
        Date lastLogin = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setLastLogin(lastLogin);
    }
    
    public void UserWebDataOnDemand.setLastUpdate(UserWeb obj, int index) {
        Date lastUpdate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setLastUpdate(lastUpdate);
    }
    
    public void UserWebDataOnDemand.setLoginCount(UserWeb obj, int index) {
        Integer loginCount = new Integer(index);
        obj.setLoginCount(loginCount);
    }
    
    public void UserWebDataOnDemand.setOldPasswordList(UserWeb obj, int index) {
        String oldPasswordList = "oldPasswordList_" + index;
        if (oldPasswordList.length() > 255) {
            oldPasswordList = oldPasswordList.substring(0, 255);
        }
        obj.setOldPasswordList(oldPasswordList);
    }
    
    public void UserWebDataOnDemand.setPassword(UserWeb obj, int index) {
        String password = "password_" + index;
        if (password.length() > 255) {
            password = password.substring(0, 255);
        }
        obj.setPassword(password);
    }
    
    public void UserWebDataOnDemand.setPasswordExpired(UserWeb obj, int index) {
        Boolean passwordExpired = Boolean.TRUE;
        obj.setPasswordExpired(passwordExpired);
    }
    
    public void UserWebDataOnDemand.setUsername(UserWeb obj, int index) {
        String username = "username_" + index;
        if (username.length() > 255) {
            username = username.substring(0, 255);
        }
        obj.setUsername(username);
    }
    
    public UserWeb UserWebDataOnDemand.getSpecificUserWeb(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        UserWeb obj = data.get(index);
        Long id = obj.getId();
        return UserWeb.findUserWeb(id);
    }
    
    public UserWeb UserWebDataOnDemand.getRandomUserWeb() {
        init();
        UserWeb obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return UserWeb.findUserWeb(id);
    }
    
    public boolean UserWebDataOnDemand.modifyUserWeb(UserWeb obj) {
        return false;
    }
    
    public void UserWebDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = UserWeb.findUserWebEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'UserWeb' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<UserWeb>();
        for (int i = 0; i < 10; i++) {
            UserWeb obj = getNewTransientUserWeb(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
