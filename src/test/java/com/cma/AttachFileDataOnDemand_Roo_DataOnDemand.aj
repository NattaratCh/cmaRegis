// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.cma;

import com.cma.AttachFile;
import com.cma.AttachFileDataOnDemand;
import com.cma.StudentDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect AttachFileDataOnDemand_Roo_DataOnDemand {
    
    declare @type: AttachFileDataOnDemand: @Component;
    
    private Random AttachFileDataOnDemand.rnd = new SecureRandom();
    
    private List<AttachFile> AttachFileDataOnDemand.data;
    
    @Autowired
    StudentDataOnDemand AttachFileDataOnDemand.studentDataOnDemand;
    
    public AttachFile AttachFileDataOnDemand.getNewTransientAttachFile(int index) {
        AttachFile obj = new AttachFile();
        setApecFileName(obj, index);
        setHoldingTaxFileName(obj, index);
        setIdcardFileName(obj, index);
        setNamecardFileName(obj, index);
        setPassportFileName(obj, index);
        setPfFileName(obj, index);
        setPhotoFileName(obj, index);
        setSlip1FileName(obj, index);
        setSlip2FileName(obj, index);
        setUploadApec(obj, index);
        setUploadHoldingTax(obj, index);
        setUploadIdcard(obj, index);
        setUploadNamecard(obj, index);
        setUploadPassport(obj, index);
        setUploadPf(obj, index);
        setUploadPhoto(obj, index);
        setUploadSlip1(obj, index);
        setUploadSlip2(obj, index);
        return obj;
    }
    
    public void AttachFileDataOnDemand.setApecFileName(AttachFile obj, int index) {
        String apecFileName = "apecFileName_" + index;
        obj.setApecFileName(apecFileName);
    }
    
    public void AttachFileDataOnDemand.setHoldingTaxFileName(AttachFile obj, int index) {
        String holdingTaxFileName = "holdingTaxFileName_" + index;
        obj.setHoldingTaxFileName(holdingTaxFileName);
    }
    
    public void AttachFileDataOnDemand.setIdcardFileName(AttachFile obj, int index) {
        String idcardFileName = "idcardFileName_" + index;
        obj.setIdcardFileName(idcardFileName);
    }
    
    public void AttachFileDataOnDemand.setNamecardFileName(AttachFile obj, int index) {
        String namecardFileName = "namecardFileName_" + index;
        obj.setNamecardFileName(namecardFileName);
    }
    
    public void AttachFileDataOnDemand.setPassportFileName(AttachFile obj, int index) {
        String passportFileName = "passportFileName_" + index;
        obj.setPassportFileName(passportFileName);
    }
    
    public void AttachFileDataOnDemand.setPfFileName(AttachFile obj, int index) {
        String pfFileName = "pfFileName_" + index;
        obj.setPfFileName(pfFileName);
    }
    
    public void AttachFileDataOnDemand.setPhotoFileName(AttachFile obj, int index) {
        String photoFileName = "photoFileName_" + index;
        obj.setPhotoFileName(photoFileName);
    }
    
    public void AttachFileDataOnDemand.setSlip1FileName(AttachFile obj, int index) {
        String slip1FileName = "slip1FileName_" + index;
        obj.setSlip1FileName(slip1FileName);
    }
    
    public void AttachFileDataOnDemand.setSlip2FileName(AttachFile obj, int index) {
        String slip2FileName = "slip2FileName_" + index;
        obj.setSlip2FileName(slip2FileName);
    }
    
    public void AttachFileDataOnDemand.setUploadApec(AttachFile obj, int index) {
        Boolean uploadApec = Boolean.TRUE;
        obj.setUploadApec(uploadApec);
    }
    
    public void AttachFileDataOnDemand.setUploadHoldingTax(AttachFile obj, int index) {
        Boolean uploadHoldingTax = Boolean.TRUE;
        obj.setUploadHoldingTax(uploadHoldingTax);
    }
    
    public void AttachFileDataOnDemand.setUploadIdcard(AttachFile obj, int index) {
        Boolean uploadIdcard = Boolean.TRUE;
        obj.setUploadIdcard(uploadIdcard);
    }
    
    public void AttachFileDataOnDemand.setUploadNamecard(AttachFile obj, int index) {
        Boolean uploadNamecard = Boolean.TRUE;
        obj.setUploadNamecard(uploadNamecard);
    }
    
    public void AttachFileDataOnDemand.setUploadPassport(AttachFile obj, int index) {
        Boolean uploadPassport = Boolean.TRUE;
        obj.setUploadPassport(uploadPassport);
    }
    
    public void AttachFileDataOnDemand.setUploadPf(AttachFile obj, int index) {
        Boolean uploadPf = Boolean.TRUE;
        obj.setUploadPf(uploadPf);
    }
    
    public void AttachFileDataOnDemand.setUploadPhoto(AttachFile obj, int index) {
        Boolean uploadPhoto = Boolean.TRUE;
        obj.setUploadPhoto(uploadPhoto);
    }
    
    public void AttachFileDataOnDemand.setUploadSlip1(AttachFile obj, int index) {
        Boolean uploadSlip1 = Boolean.TRUE;
        obj.setUploadSlip1(uploadSlip1);
    }
    
    public void AttachFileDataOnDemand.setUploadSlip2(AttachFile obj, int index) {
        Boolean uploadSlip2 = Boolean.TRUE;
        obj.setUploadSlip2(uploadSlip2);
    }
    
    public AttachFile AttachFileDataOnDemand.getSpecificAttachFile(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        AttachFile obj = data.get(index);
        Long id = obj.getId();
        return AttachFile.findAttachFile(id);
    }
    
    public AttachFile AttachFileDataOnDemand.getRandomAttachFile() {
        init();
        AttachFile obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return AttachFile.findAttachFile(id);
    }
    
    public boolean AttachFileDataOnDemand.modifyAttachFile(AttachFile obj) {
        return false;
    }
    
    public void AttachFileDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = AttachFile.findAttachFileEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'AttachFile' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<AttachFile>();
        for (int i = 0; i < 10; i++) {
            AttachFile obj = getNewTransientAttachFile(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
